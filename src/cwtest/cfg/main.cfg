{

  a:1,
  b:2,
  c:[1.23,4.56,7.89],


  datasets: {
    dataL: [
      { name: mnist, inDir: "~/src/datasets/mnist" }
    ]
    
  }

  test: {

    variadicTpl: {},

    fileSys: {},
    numbCvt: {},
    object: {},
    time:{},
    thread: {},
    spscBuf: {},
    spscQueueTmpl: {},
    
    websockSrv: {
      physRootDir: "~/src/cwtest/src/libcw/html/websockSrvTest",
      dfltHtmlPageFn: "test_websocket.html",
    },

    serialSrv: {},
    midiDevice: {},
    textBuf: {},
    audioBuf: {},
    audioDev: {},
    audioDevAlsa: {},
    audioDevRpt: {},

    socket: {},
    socketTcp: {},
    socketSrvUdp: {},
    socketSrvTcp: {},
    sockMgrTest: {},
    uiTest: {
       ui: {
         physRootDir: "/home/kevin/src/cwtest/src/libcw/html/uiTest",
         dfltPageFn:  "index.html",
         port: 5687,
         rcvBufByteN: 2048,
         xmtBufByteN: 2048,
         fmtBufByteN: 4096,
         websockTimeOutMs: 50,   // max time out while blocking for a websock event
         uiCfgFn: "ui.cfg"       // default UI resource description
       }	    
    },
    
    socketMdns: {},
    dnssd: {},
    eucon: {},
    dirEntry: {},
    io: {
            ui: {
                  physRootDir: "/home/kevin/src/cwtest/src/libcw/html/ioTest",
                  dfltPageFn:  "index.html",
                  port: 5687,
                  rcvBufByteN: 2048,
                  xmtBufByteN: 2048,
                  fmtBufByteN: 4096,
                  websockTimeOutMs: 50,  // max time out while blocking for a websock event
                  uiCfgFn: "ui.cfg"      // default UI resource description
            },

        
            serial: [
                {  
                   label:   "port1",        // User label
                   device: "/dev/ttyACM0",  // Serial device name
                   baud:   38400,
                   bits:   8,
                   stop:   1,
                   parity: no,
                   pollPeriodMs: 50
                }
              ],
              
              
              midi: {


                 parserBufByteN: 1024,


              },
          
              audio: {
                  meterMs: 50,          // audio meter filter length and meter callback period
		  threadTimeOutMs: 50,  // audio thread cond var time out

		  groupL: [
		    {
		      enableFl:       true,   // (req) 
		      label:          "main", // (req) User label 
		      id:                0,   // (req) User id (can also be set at runtime)
                      srate:         48000,   // (req) Sample rate used by all devices in this group
		      dspFrameCnt:      64    // (req) Size of DSP processing buffers 
		    }
		  ],
                  
                  deviceL: [
                  {
		    // System device name
                    device:       "Scarlett 18i20 USB USB Audio",
		    //device:       "USB Audio CODEC USB Audio",
		    // device:       "HDA Intel PCH CS4208 Analog",
		    
                    enableFl:      true,    // (req) 
		    label:         "main",  // (req) User label
		    userId:            0,   // (opt) User id (can also be set at runtime)
		    framesPerCycle:  512,   // (req) Samples per audio device cycle
                    cycleCnt:          3,   // (req) Count of device cycle buffers.		    
		    inGroup:      "main",   // (opt) All devices in a group must be 'ready' to source
		    outGroup:     "main",   // (opt) or sink data before an audio callback is made for that group
                  }
                ]
            },

	    socket: {

               maxSocketCnt: 10,
	       recvBufByteCnt: 4096,
	       threadTimeOutMs: 50,
	       
	       socketL: [
	       {
	         enableFl: true,     // (req) 
		 label:    "sock0", // (req)
		 userId:   0,        // (opt) 
		 port:     5687,     // (req) This sockets port number
		 timeOutMs: 50,      // (req) Timeout used for blocking sockets.
		 
		 // Attributes:
		 // blocking or non-blocking,
		 // udp or tcp, 
		 // listen, broadcast
		 // reuse_addr, reuse_port, multi_cast_ttl, multi_cast_loop
		 // stream 
		 attrL: [ udp, blocking ],
		 
		 // Automatically connect to this remote socket.
		 // remoteAddr: "192.168.0.10", // (opt)
		 // remotePort: 5687           // (opt)
	       },

	       {
	         enableFl: true,     // (req) 
		 label:    "sock1", // (req)
		 userId:   1,        // (opt) 
		 port:     5688,     // (req) This sockets port number
		 timeOutMs: 50,      // (req) Timeout used for blocking sockets.
		 
		 attrL: [ udp, blocking ],		 
	       }



	       ]
	       
	    
	    }
         },


    audioDevRpt: {},
    
    audioDevTest: {
     srate: 48000,
     bufN: 3,
     framesPerCycle: 512,
     inDev: "USB Audio CODEC USB Audio",
     outDev: "USB Audio CODEC USB Audio",
     meterMs: 50,
     amHz: 1,
     amMaxGain: 0.8
    },
    

    
    mtx:
    {
      m0: [ [0,3], [1,4], [2,5]  ],
      m1: [ [0,1,2],[3,4,5] ],
      
      m2: [ [[0,1],[2,3]], [[4,5],[6,7]], [[8,9],[10,11]] ],
      m3: [ 0,1,2 ],

      m4: [ [10,13], [11,14], [12,15]  ],

      y0: [ [5,14],[14,50] ],
      y1: [ [9,12,15],[12,17,22],[15,22,29] ],
    },

    audiofile:
    {
      rpt:  { fn:"~/temp/temp_sine.wav", begIdx: 0, frmCnt: 10 }
    },

    afop:
    {
      sine: { fn:"~/temp/temp_sine_1000_hz.wav", srate: 48000, bits: 16, hz: 1000, gain: 0.5, secs: 10.0 },
    },

    mnist: {
      desc: "Print the MNIST images to an SVG/HTML file.",
      inDir: "~/src/datasets/mnist",
      outHtmlFn: "~/temp/image_svg_0.html"
    },


    dataset_wtr: {
        outFn: "~/temp/temp.ds"
    },

    dataset_rdr: {
        inFn: "~/temp/temp.ds",
        cacheByteN: 146,
    },

    dataset_adapter: {
         inFn: "~/temp/temp.ds",
         cacheByteN: 154,
         batchN: 3,
    },


    dataset: {
      desc: "Read MNIST native file -> write dataset file -> read datasetf le -> write SVG file",
      inDir: "~/src/datasets/mnist",
      dsFn: "~/temp/temp_dataset.ds",
      outHtmlFn: "~/temp/image_svg.html",
      batchN: 3500,
      cacheByteN: 2800000
    },

    dataset0: {
    dsLabel: mnist,
    batchN: 32,
    validPct: 10,
    testPct: 10,
    dataL:[
     { name: mnist, inDir: "~/src/datasets/mnist" }
    ],
    
    },


    svg: {
      desc:"Create an SVG/HTML test file.",
      notes:"If no CSS file name is given then the style information will be written inline.",
      outHtmlFn: "~/temp/test_svg.html",
      outCssFn:  "~/temp/test_svg.css"
    },

    audio_mix_a:
    {
      test_label: audio_mix,
      
      outFn: "~/temp/kc_record/xform_only/mix_6_4/preset_a_mix.wav",
      outBits: 24,
      srcL: [
      { gain: 0.6, src:"~/temp/kc_record/xform_only/dry/preset_a_dry.aiff" },
      { gain: 0.4, src:"~/temp/kc_record/xform_only/wet/preset_a_wet.aiff" } ]
    },

    audio_mix_b:
    {
      test_label: audio_mix,

     outFn: "~/temp/kc_record/xform_only/mix_6_4/preset_b_mix.wav",
      outBits: 24,
      srcL: [
      { gain: 0.6, src:"~/temp/kc_record/xform_only/dry/preset_b_dry.aiff" },
      { gain: 0.4, src:"~/temp/kc_record/xform_only/wet/preset_b_wet.aiff" } ]
    },

    audio_mix_c:
    {
      test_label: audio_mix,

      outFn: "~/temp/kc_record/xform_only/mix_6_4/preset_c_mix.wav",
      outBits: 24,
      srcL: [
      { gain: 0.6, src:"~/temp/kc_record/xform_only/dry/preset_c_dry.aiff" },
      { gain: 0.4, src:"~/temp/kc_record/xform_only/wet/preset_c_wet.aiff" } ]
    },

    audio_mix_d:
    {
      test_label: audio_mix,

      outFn: "~/temp/kc_record/xform_only/mix_6_4/preset_d_mix.wav",
      outBits: 24,
      srcL: [
      { gain: 0.6, src:"~/temp/kc_record/xform_only/dry/preset_d_dry.aiff" },
      { gain: 0.4, src:"~/temp/kc_record/xform_only/wet/preset_d_wet.aiff" } ]
    },

    audio_mix_f1:
    {
      test_label: audio_mix,
    
      outFn: "~/temp/kc_record/xform_only/mix_6_4/preset_f1_mix.wav",
      outBits: 24,
      srcL: [
      { gain: 0.6, src:"~/temp/kc_record/xform_only/dry/preset_f1_dry.aiff" },
      { gain: 0.4, src:"~/temp/kc_record/xform_only/wet/preset_f1_wet.aiff" } ]
    },

    audio_mix_f2:
    {
    
      test_label: audio_mix,
      
      outFn: "~/temp/kc_record/xform_only/mix_6_4/preset_f2_mix.wav",
      outBits: 24,
      srcL: [
      { gain: 0.6, src:"~/temp/kc_record/xform_only/dry/preset_f2_dry.aiff" },
      { gain: 0.4, src:"~/temp/kc_record/xform_only/wet/preset_f2_wet.aiff" } ]
    },

    audio_mix_f3:
    {
    test_label: audio_mix,

      outFn: "~/temp/kc_record/xform_only/mix_6_4/preset_f3_mix.wav",
      outBits: 24,
      srcL: [
      { gain: 0.6, src:"~/temp/kc_record/xform_only/dry/preset_f3_dry.aiff" },
      { gain: 0.4, src:"~/temp/kc_record/xform_only/wet/preset_f3_wet.aiff" } ]
    },

    audio_mix_f4:
    {
      test_label: audio_mix,

      outFn: "~/temp/kc_record/xform_only/mix_7_3/preset_f4_mix.wav",
      outBits: 24,
      srcL: [
      { gain: 0.7, src:"~/temp/kc_record/xform_only/dry/preset_f4_dry.aiff" },
      { gain: 0.3, src:"~/temp/kc_record/xform_only/wet/preset_f4_wet.aiff" } ]
    },

    audio_mix_g1a:
    {
      outFn: "~/temp/kc_record/xform_only/mix_7_3/preset_g1a_mix.wav",
      outBits: 24,
      srcL: [
      { gain: 0.7, src:"~/temp/kc_record/xform_only/dry/preset_g1a_dry.aiff" },
      { gain: 0.3, src:"~/temp/kc_record/xform_only/wet/preset_g1a_wet.aiff" } ]
    },

    audio_mix_g1d:
    {
      outFn: "~/temp/kc_record/xform_only/mix_7_3/preset_g1d_mix.wav",
      outBits: 24,
      srcL: [
      { gain: 0.7, src:"~/temp/kc_record/xform_only/dry/preset_g1d_dry.aiff" },
      { gain: 0.3, src:"~/temp/kc_record/xform_only/wet/preset_g1d_wet.aiff" } ]
    },

    audio_mix_ga:
    {
      outFn: "~/temp/kc_record/xform_only/mix_7_3/preset_ga_mix.wav",
      outBits: 24,
      srcL: [
      { gain: 0.7, src:"~/temp/kc_record/xform_only/dry/preset_ga_dry.aiff" },
      { gain: 0.3, src:"~/temp/kc_record/xform_only/wet/preset_ga_wet.aiff" } ]
    },

    audio_mix_g:
    {
      outFn: "~/temp/kc_record/xform_only/mix_7_3/preset_g_mix.wav",
      outBits: 24,
      srcL: [
      { gain: 0.7, src:"~/temp/kc_record/xform_only/dry/preset_g_dry.aiff" },
      { gain: 0.3, src:"~/temp/kc_record/xform_only/wet/preset_g_wet.aiff" } ]
    },

    select_to_file:
    {
      outDir: "~/temp/kc_record/xform_only/cut",
      outBits: 32,
      selectL: [
        { begSec: 1743.3, endSec:  1816.44, dst: "dry.wav", src: "~/temp/kc_record/xform_only/dry/a.aiff" },
        { begSec: 1743.3, endSec:  1816.44, dst: "a.wav",   src: "~/temp/kc_record/xform_only/wet/a.aiff" },
        { begSec: 1743.3, endSec:  1816.44, dst: "b.wav",   src: "~/temp/kc_record/xform_only/wet/b.aiff" },
        { begSec: 1743.3, endSec:  1816.44, dst: "c.wav",   src: "~/temp/kc_record/xform_only/wet/c.aiff" },
        
        { begSec: 1743.3, endSec:  1816.44, dst: "d.wav",   src: "~/temp/kc_record/xform_only/wet/d.aiff" },
        { begSec: 1743.3, endSec:  1816.44, dst: "f1.wav",  src: "~/temp/kc_record/xform_only/wet/f1.aiff" },
        { begSec: 1743.3, endSec:  1816.44, dst: "f2.wav",  src: "~/temp/kc_record/xform_only/wet/f2.aiff" },

        { begSec: 1743.3, endSec:  1816.44, dst: "f3.wav",  src: "~/temp/kc_record/xform_only/wet/f3.aiff" },
        { begSec: 1743.3, endSec:  1816.44, dst: "f4.wav",  src: "~/temp/kc_record/xform_only/wet/f4.aiff" },
        { begSec: 1743.3, endSec:  1816.44, dst: "g.wav",   src: "~/temp/kc_record/xform_only/wet/g.aiff" },
        
        { begSec: 1743.3, endSec: 1816.44, dst: "ga.wav",  src: "~/temp/kc_record/xform_only/wet/ga.aiff" },
        { begSec: 1743.3, endSec: 1816.44, dst: "g1a.wav", src: "~/temp/kc_record/xform_only/wet/g1a.aiff" },
        { begSec: 1743.3, endSec: 1816.44, dst: "g1d.wav", src: "~/temp/kc_record/xform_only/wet/g1d.aiff" },

        ]
      
    },

    // Extract a section of source audio, apply fade in/out ramps, and mix it into a destination file.
    cut_and_mix:
    {
        dstFn:  "~/temp/test_xfade.wav",
        dstBits: 24,
 
        srcDir: "~/temp",
        crossFadeSec: 0.5,
        
        argL: [
        { srcBegSec: 1.0, srcEndSec: 2.0, srcFn: "temp_sine_100_hz.wav",  dstBegSec:0.0, gain:1.0 },
        { srcBegSec: 3.0, srcEndSec: 4.0, srcFn: "temp_sine_1000_hz.wav", dstBegSec:0.5, gain:1.0 }
        ]
    },

    // Given a set of overlapping source files of identical length solo a given source during a specified time interval.
    parallel_mix:
    {
        dstFn:  "~/temp/test_pmix.wav",
        dstBits: 24,

        srcDir: "~/temp/kc_record/xform_only/cut",
        
        argL: [
        { srcBegSec: 0.0,   srcEndSec:  4.2,  srcFn: "dry_mix.wav",  fadeOutSec:0.5, gain:1.0 },
        { srcBegSec: 4.2,   srcEndSec:  8.6,  srcFn: "d_mix.wav",    fadeOutSec:0.5, gain:1.0  }
        { srcBegSec: 8.6,   srcEndSec: 15.67, srcFn: "ga_mix.wav",   fadeOutSec:0.5, gain:1.0  }
        { srcBegSec: 15.67, srcEndSec: 17.98, srcFn: "dry_mix.wav",  fadeOutSec:0.0, gain:1.0  }
        ]
    },

    convolve_file:
    {
        dstFn:  "~/temp/test_convolve.wav",
        dstBits: 32,
        srcFn: "~/temp/select_to_file/preset_f1.wav",
        irFn: "~/sdk/freeverb3/samples/IR/IR_theater.wav",
        irScale: 1.0,
        
    },

    transform_app:
    {
        srcDir: "~/temp/kc_record/xform_only/cut",             // location of 'wet' source files
        dryFn: "~/temp/kc_record/xform_only/cut/concert.wav",  // dry source file
        
        dstPreFn:  "~/temp/test_xform_app.wav",     // the output file prior to reverb
        dstRevFn:  "~/temp/test_xform_app_rev.wav", // the output file with reverb
        
        dstBits: 32,

        irEnableFl: false,
        irScale: 0.25,
        irFn: null, //"~/media/audio/IR/freeverb3/101-cup.wav"

        
        argL: [
        { srcBegSec: 0.0,   srcEndSec:  4.2,  srcFn: "a.wav",  fadeOutSec:0.5, wetGain:0.3  },
        { srcBegSec: 4.2,   srcEndSec:  8.6,  srcFn: "b.wav",  fadeOutSec:0.5, wetGain:0.3  },
        { srcBegSec: 8.6,   srcEndSec: 15.67, srcFn: "c.wav",  fadeOutSec:0.5, wetGain:0.3  },
        { srcBegSec: 15.67, srcEndSec: 17.98, srcFn: "d.wav",  fadeOutSec:0.0, wetGain:0.3  },
        
        ]
    },

    fft: {},
    ifft: {},
    convolve: {}
  }





}